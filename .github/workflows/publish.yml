name: Publish to JSR

on:
  release:
    types: [created]
  workflow_dispatch:
    inputs:
      dry-run:
        description: "Run in dry-run mode (no actual publish)"
        required: false
        default: "true"
        type: choice
        options:
          - "true"
          - "false"

permissions:
  contents: read
  id-token: write

jobs:
  lint-check:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Run lint checks
        run: deno lint

  format-check:
    name: Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Check code format
        run: deno fmt --check

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Run type checks
        run: deno task check

  unit-test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: [lint-check, format-check, type-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Run tests
        run: deno task test:unit

  publish:
    name: Publish to JSR
    runs-on: ubuntu-latest
    needs: [unit-test]
    environment: registry
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Setup Deno
        uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x
          cache: true

      - name: Dry run publish
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.dry-run == 'true'
        run: deno publish --dry-run --provenance

      - name: Publish to JSR
        if: github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && github.event.inputs.dry-run == 'false')
        run: deno publish --provenance

  notify:
    name: Notify Deployment
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    steps:
      - name: Notify success
        if: needs.publish.result == 'success'
        run: |
          {
            echo "## ✅ Deployment Successful"
            echo ""
            echo "The package has been successfully published to JSR!"
            echo ""
            echo "### Deployment Details"
            echo "- **Status**: Success"
            echo "- **Commit**: \`${{ github.sha }}\`"
            echo "- **Timestamp**: $(date -u)"
            echo "- **Workflow Run**: [${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo ""
            echo "### What's Next?"
            echo "- View the package on JSR: [https://jsr.io/@anitrend/request-client](https://jsr.io/@anitrend/request-client)"
            echo "- Check the [publish job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for details"
          } >> $GITHUB_STEP_SUMMARY

          echo "✅ Deployed successfully!"
          echo "Commit: ${{ github.sha }}"
          echo "Timestamp: $(date -u)"

      - name: Notify failure
        if: needs.publish.result == 'failure'
        run: |
          {
            echo "## ❌ Deployment Failed"
            echo ""
            echo "The package publication to JSR failed."
            echo ""
            echo "### Failure Details"
            echo "- **Status**: Failed"
            echo "- **Job Result**: \`${{ needs.publish.result }}\`"
            echo "- **Commit**: \`${{ github.sha }}\`"
            echo "- **Timestamp**: $(date -u)"
            echo ""
            echo "### Troubleshooting Steps"
            echo "1. [Check the publish job logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo "2. Review the 'Publish to JSR' step for specific error messages"
            echo "3. Common causes:"
            echo "   - Authentication issues (check OIDC token permissions)"
            echo "   - Version conflicts (version may already exist on JSR)"
            echo "   - Validation errors (check package configuration)"
            echo "   - Network issues or JSR service availability"
            echo ""
            echo "### Quick Links"
            echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            echo "- [JSR Documentation](https://jsr.io/docs)"
          } >> $GITHUB_STEP_SUMMARY

          echo "::error::Deployment failed!"
          echo "Job result: ${{ needs.publish.result }}"
          echo "Commit: ${{ github.sha }}"
          echo "Timestamp: $(date -u)"
          exit 1
